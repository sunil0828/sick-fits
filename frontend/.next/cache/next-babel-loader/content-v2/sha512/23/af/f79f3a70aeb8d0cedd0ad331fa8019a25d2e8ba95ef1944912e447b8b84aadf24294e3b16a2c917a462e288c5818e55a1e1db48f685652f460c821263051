{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport useForm from '../lib/useForm';\nimport DisplayError from './ErrorMessage';\nimport Form from './styles/Form';\nconst SINGLE_PRODUCT_QUERY = gql`\n  query SINGLE_PRODUCT_QUERY($id: ID!) {\n    Product(where: { id: $id }) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateProduct(\n      id: $id\n      data: { name: $name, description: $description, price: $price }\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\nexport default function UpdateProduct({\n  id\n}) {\n  // 1. We need to get the existing product\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  }); // 2. We need to get the mutation to update the product\n\n  const [updateProduct, {\n    data: updateData,\n    errror: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION); // 2.5 Create some state for the form inputs:\n\n  const {\n    inputs,\n    handleChange,\n    clearForm,\n    resetForm\n  } = useForm((data === null || data === void 0 ? void 0 : data.Product) || {\n    name: '',\n    description: '',\n    price: ''\n  });\n  console.log(inputs);\n  if (loading) return /*#__PURE__*/_jsx(\"p\", {\n    children: \"loading...\"\n  }); // 3. We need the form to handle the updates\n\n  return /*#__PURE__*/_jsxs(Form, {\n    onSubmit: async e => {\n      e.preventDefault();\n      const res = await updateProduct({\n        variables: {\n          id,\n          name: inputs.name,\n          description: inputs.description,\n          price: inputs.price\n        }\n      }).catch(console.error);\n      console.log(res); // Submit the inputfields to the backend:\n      // TODO: Handle Submit!!!\n      // const res = await createProduct();\n      // clearForm();\n      // // Go to that product's page!\n      // Router.push({\n      //   pathname: `/product/${res.data.createProduct.id}`,\n      // });\n    },\n    children: [/*#__PURE__*/_jsx(DisplayError, {\n      error: error || updateError\n    }), /*#__PURE__*/_jsxs(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxs(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsx(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        })]\n      }), /*#__PURE__*/_jsxs(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsx(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        })]\n      }), /*#__PURE__*/_jsxs(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsx(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        })]\n      }), /*#__PURE__*/_jsx(\"button\", {\n        type: \"submit\",\n        children: \"Update Product\"\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}